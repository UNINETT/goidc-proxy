image: golang:1.8

variables:
  REPO_NAME: github.com/uninett/goidc-proxy

before_script:
  - export OUR_VERSION=${CI_BUILD_TAG:-$CI_BUILD_REF_NAME}
  - echo "Setting version to $OUR_VERSION"
  - export DEPLOY_DIR="/opt/goidc-proxy-deploys/$OUR_VERSION/"
  - echo "Setting deploy dir to $DEPLOY_DIR"


stages:
  - test
  - build
  - deploy

test-project:
  stage: test
  script:
    - go version
    - echo $CI_PROJECT_DIR
    - curl https://glide.sh/get | sh
    - mkdir -p $GOPATH/src/$REPO_NAME
    - mv $CI_PROJECT_DIR/* $GOPATH/src/$REPO_NAME
    - cd $GOPATH/src/$REPO_NAME
    - cp goidc_test.json goidc.json
    - glide install
    - go get -v github.com/go-playground/overalls
    - overalls -project=$REPO_NAME -ignore=.git,.glide,vendor -debug -- -race -v
    - go tool cover -func=overalls.coverprofile

build-project:
  stage: build
  script:
    - go version
    - echo $CI_PROJECT_DIR
    - curl https://glide.sh/get | sh
    - mkdir -p $GOPATH/src/$REPO_NAME
    - mv $CI_PROJECT_DIR/* $GOPATH/src/$REPO_NAME
    - cd $GOPATH/src/$REPO_NAME
    - glide install
    - go build -o $CI_PROJECT_DIR/goidc-proxy
  artifacts:
    paths:
      - goidc-proxy

deploy-testing:
  stage: deploy
  variables:
    DEPLOY_HOST: "goidc-deploy@$TESTING_HOST"
    SSH_OPTIONS: "-o GlobalKnownHostsFile=ssh-known-hosts -i ssh-private-key"
  script:
    - echo "$DEPLOY_KEY" > ssh-private-key
    - chmod 0600 ssh-private-key
    - echo "$TESTING_HOSTKEY" > ssh-known-hosts
    - ssh $SSH_OPTIONS $DEPLOY_HOST /bin/mkdir -p $DEPLOY_DIR
    - scp $SSH_OPTIONS goidc-proxy $DEPLOY_HOST:$DEPLOY_DIR
    - rm ssh-private-key ssh-known-hosts
  environment:
    name: testing
  only:
    - master

deploy-prod:
  stage: deploy
  variables:
    SSH_OPTIONS: "-o GlobalKnownHostsFile=ssh-known-hosts -i ssh-private-key"
  script:
    - echo "$DEPLOY_KEY" > ssh-private-key
    - chmod 0600 ssh-private-key
    - echo "$PROD_HOST_A_HOSTKEY" > ssh-known-hosts
    - ssh $SSH_OPTIONS goidc-deploy@$PROD_HOST_A /bin/mkdir -p $DEPLOY_DIR
    - scp $SSH_OPTIONS goidc-proxy goidc-deploy@$PROD_HOST_A:$DEPLOY_DIR
    - echo "$PROD_HOST_B_HOSTKEY" > ssh-known-hosts
    - ssh $SSH_OPTIONS goidc-deploy@$PROD_HOST_B /bin/mkdir -p $DEPLOY_DIR
    - scp $SSH_OPTIONS goidc-proxy goidc-deploy@$PROD_HOST_B:$DEPLOY_DIR
    - rm ssh-private-key ssh-known-hosts
  environment:
    name: production
  only:
    - tags

docker-latest:
  stage: deploy
  image: registry.uninett.no/system/docker-builder:1.13.1-uninett7
  script:
    - docker build -t "registry.uninett.no/public/goidc-proxy:latest" -t "quay.io/uninett/goidc-proxy:latest" .
    - docker push "quay.io/uninett/goidc-proxy:latest"
    - docker push "registry.uninett.no/public/goidc-proxy:latest"
  only:
    - master

docker-stable:
  stage: deploy
  image: registry.uninett.no/system/docker-builder:1.13.1-uninett7
  script:
    - docker build -t "registry.uninett.no/public/goidc-proxy:$CI_BUILD_REF_NAME" -t "quay.io/uninett/goidc-proxy:$CI_BUILD_REF_NAME" .
    - docker push "quay.io/uninett/goidc-proxy:$CI_BUILD_REF_NAME"
    - docker push "registry.uninett.no/public/goidc-proxy:$CI_BUILD_REF_NAME"
  only:
    - tags
